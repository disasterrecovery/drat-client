// Generated by CoffeeScript 1.3.3
(function() {
  var DratBrowser,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  DratBrowser = (function() {

    function DratBrowser(options) {
      this.display_resources = __bind(this.display_resources, this);

      var _this = this;
      this.host = 'http://drat-api.herokuapp.com';
      this.url = "" + this.host + "/api/v1/resources.json?callback=?";
      this.$list = $(options.list);
      this.$filter_field = $('#list-filter');
      this.$filter_field.bind('keyup', function(e) {
        e.preventDefault();
        return _this.start_filter();
      });
      this.get_resources_from_drat_api(this.display_resources);
    }

    DratBrowser.prototype.start_filter = function() {
      var q;
      q = this.search_value();
      if (q === '' || q.length > 1) {
        return this.match_query(q);
      } else {
        return this.$list.children().show();
      }
    };

    DratBrowser.prototype.search_value = function() {
      return this.$filter_field.val();
    };

    DratBrowser.prototype.match_query = function(q) {
      var $item, $items, item, _i, _len;
      $items = this.$list.children();
      for (_i = 0, _len = $items.length; _i < _len; _i++) {
        item = $items[_i];
        $item = $(item);
        if ($item.data('name').search(new RegExp(q, 'i')) === -1) {
          $item.hide();
        }
      }
      return $items;
    };

    DratBrowser.prototype.get_resources_from_drat_api = function(callback) {
      return $.getJSON(this.url).success(callback);
    };

    DratBrowser.prototype.display_resources = function(resources) {
      var resource, _i, _len, _results,
        _this = this;
      _results = [];
      for (_i = 0, _len = resources.length; _i < _len; _i++) {
        resource = resources[_i];
        _results.push((function(resource) {
          var $available_to, $row, categories, category, cell, cells, entity, region, resource_is_national, _j, _k, _l, _len1, _len2, _len3, _ref, _ref1;
          cells = [];
          cells.push(resource.name);
          resource_is_national = resource.national;
          region = resource_is_national ? 'National' : "" + resource.state + " " + resource.locale;
          cells.push(region);
          categories = '';
          _ref = resource.categories;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            category = _ref[_j];
            categories += "" + category + ", ";
          }
          cells.push(categories);
          $available_to = $('<ul>');
          _ref1 = resource.available_to;
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            entity = _ref1[_k];
            $available_to.append($('<li>').text(entity));
          }
          cells.push($available_to);
          $row = $('<tr>');
          $row.data('name', resource.name);
          for (_l = 0, _len3 = cells.length; _l < _len3; _l++) {
            cell = cells[_l];
            $row.append($('<td>').html(cell));
          }
          return _this.$list.append($row);
        })(resource));
      }
      return _results;
    };

    return DratBrowser;

  })();

  $(function() {
    return window.drat_browser = new DratBrowser({
      list: $('#resource-list tbody')[0]
    });
  });

}).call(this);
